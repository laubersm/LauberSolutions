Passwordless ssh using public-private key pairs
===============================================
Susan Lauber <sml@laubersolutions.com>
v1.0, 2019-08

If you interact regularly with SSH commands and remote hosts, you may find that using a key pair instead of passwords can be very convenient. Instead of the remote system prompting for a password with each connection, authentication can be automatically negotiated using a public and private key pair. 
The private key remains secure on your own workstation and the public key gets placed in a specific location on each remote system that you access.

Your private key may be secured locally with a passphrase. A local caching program such as `ssh-agent` or `gnome-keyring` allows you to enter that passphrase periodically instead of each time you use the key to access a remote system. 


Generating a keypair and Propagating the public key
---------------------------------------------------

Generate the key
~~~~~~~~~~~~~~~~~

The minimum to generate a key pair involve running the `ssh-keygen` command and taking the defaults at all the prompts.

<code class="shell session">
$ ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/home/training/.ssh/id_rsa): 
Created directory '/home/training/.ssh'.
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /home/training/.ssh/id_rsa.
Your public key has been saved in /home/training/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:qOoqJFfbfnBFMZ6WFsZQZfy6WXTfcknQEd0B+quTjHw training@example.com
The key's randomart image is:
+---[RSA 2048]----+
|        .+*+o.o+*|
|         oo*o. .o|
|         .*. ..  |
|    .  . o. . o..|
|   . o. S.   +..+|
|... ..o .   . +.+|
|o.  .. o. o .= o |
|.  .  . .o E+    |
|ooo    .  ...    |
+----[SHA256]-----+
</code>

The default location to store the keys is in the `~/.ssh` directory and this directory will be created if it does not exist. Allowing this command to create the directory also ensures that the owner and permissions are set correctly. Some applications will not use keys if the permissions to the private key are too open.

<code class="shell session">
$ ls -al .ssh
total 16
drwx------. 2 training training 4096 Aug 12 07:43 .
drwx------. 5 training training 4096 Aug 12 07:43 ..
-rw-------. 1 training training 1843 Aug 12 07:43 id_rsa
-rw-r--r--. 1 training training  415 Aug 12 07:43 id_rsa.pub
</code>

The file ending in `.pub` is the public key which needs to be transferred to the remote systems. It is a file containing a single line the protocol, the key, and an email used as an identifier. Options on the `ssh-keygen` command allow you specify a different identifier.

<code class="shell session">
$ cat .ssh/id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDZ4SCcMX1EK31G/qLyCs3PaFcWkx0QA61OwQNHYztvrg7iD/etN4S5UP6ugHjTcUvqD/fZJFBJeryK0Hz0FzejKYiJBxQuUqadyXFSW30VnW6mAzgNoz20rGc2mipUrsaqdBWWv5U7vX8sgjEHEgVHzq6pfWj681PtikJ8Dss1IvPiPvOoRz2jb1dQnnrAVqMDGeWbm4yjYQamPvnLo1Hy23NgXpZ7KXv9PuDDu3tqcoMUqFk7sHswMrCCUY9SWOD5JBbhD3JX4LPs68WWbETOqOQ3a9ebTsL3wRPSbuu/djhL9Qmd8fN2OaM2U2zFpeE3NzBq4KT/ml6RTv44EMuh training@example.com
</code>

After generating the keypair, the `ssh-keygen` command also displays the fingerprint and radomart image that are unique to this key. This can be shared with other people who may need to verify your public key.
Later you can view these with:

<code class="shell session">
$ ssh-keygen -lv
Enter file in which the key is (/home/training/.ssh/id_rsa): 
</code>

The -l option lists the fingerprint, the -v option adds the ASCII art.


Propagate the public key to a remote system
~~~~~~~~~~~~~~~~~~

If password authentication is currently enabled, then the easiest way to transfer the public key to the remote host is with the `ssh-copy-id` command. If you used the default name for the key all you need to specify is the remote user and host.

<code class="shell session">
$ ssh-copy-id susan@streamer
/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: "/home/training/.ssh/id_rsa.pub"
/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys
susan@streamer's password: 

Number of key(s) added: 1

Now try logging into the machine, with:   "ssh 'susan@streamer'"
and check to make sure that only the key(s) you wanted were added.
</code>

Following the instructions from the output, verify that you can connect using the key pair. If you implemented a passphrase, you will be prompted for the passphrase to use the private key. 

<code class="shell session">
$ ssh susan@streamer
Last login: Sat Aug 10 14:09:33 2019 from 192.168.5.101
</code>

Examine the resulting authorized key file. This is where the public key was appended. If the directory or file did not exist, then they were created with the correct ownership and permissions. Each line is a single authorized public key.

<code class="shell session">
[susan@streamer ~]$ cat .ssh/authorized_keys 
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDZ4SCcMX1EK31G/qLyCs3PaFcWkx0QA61OwQNHYztvrg7iD/etN4S5UP6ugHjTcUvqD/fZJFBJeryK0Hz0FzejKYiJBxQuUqadyXFSW30VnW6mAzgNoz20rGc2mipUrsaqdBWWv5U7vX8sgjEHEgVHzq6pfWj681PtikJ8Dss1IvPiPvOoRz2jb1dQnnrAVqMDGeWbm4yjYQamPvnLo1Hy23NgXpZ7KXv9PuDDu3tqcoMUqFk7sHswMrCCUY9SWOD5JBbhD3JX4LPs68WWbETOqOQ3a9ebTsL3wRPSbuu/djhL9Qmd8fN2OaM2U2zFpeE3NzBq4KT/ml6RTv44EMuh training@example.com
</code>

To revoke access for this keypair, remove the line for the public key.

There are many other options that can be added to the line in the authorized key file to control access. These are usually used by administrators placing the public keys on a system with restrictions. These restrictions may include where the connection may originate, what command(S) may be run, and even a date indicating when to stop accepting this key. These and more options are listed in the `sshd` man page.


Changing the passphrase
~~~~~~~~~~~~~~~~~~~~~~~

If you need to change a passphrase on your private key or if you initially set an empty passphrase and want that protection at a later time, use the `ssh-keygen` command with the `-p` option:

<code class="shell session">
$ ssh-keygen -p
Enter file in which the key is (/home/training/.ssh/id_rsa): 
Key has comment 'training@example.com'
Enter new passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved with the new passphrase.
</code>

You can add additional options to specify the key (`-f`), and the old (`-P`) or new (`-N`) passphrases on the command line. Remember that any passwords specified on the command line will be saved in your shell history.
See the man page for `ssh-keygen` for addition options.

Rotating keys
~~~~~~~~~~~~~

While the public key by itself is meant to be shared, keep in mind that if someone obtains your private key, they can then use that to access all systems that have the public key. These key pairs also do not have a period of validity like GPG keys or PKI certificates.

If you have any reason to suspect that a private key has been stolen or otherwise compromised, you should replace that key pair. The old public key will need to be removed from all systems, a new key is generated with `ssh-keygen`, and the new public key is transferred to the desired remote systems. 

If you are rotating keys as a precaution and without any concern of compromise, you can use the old key pair to authenticate the transfer of the new public key before removing the old key.


Empty Passphrases - are they ever a good idea?
----------------------------------------------

There are several things to think about when considering using an empty passhprase on your ssh private key.

How secure is the private key file?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you do tend to work from multiple client systems and want to either have multiple copies of your key or keep a copy on removable media, then it really is a good idea to have a passphrase on the private key. This is in addition to protecting access to the key file with encrypted media.
If you have only one copy of the private key and it is kept on a system that is well secured and not shared, then having a passphrase is simply one more level of protection just in case.

Remember that changing the passphrase on one copy does not change the passphrase on other copies. The passphrase is simply locking access to a specific key file. 

Why do think you need an empty passphrase?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

There are cases for keys with empty passphrases. Some utilities that need to automatically transfer files between systems need a passwordless method to authenticate. 
The kdump utility, when configured to dump the kernel to a remote system using SSH, is one example. 
Another common use is to generate a key pair to be used within a script that is designed to be run unattended such as from a cron job.

How about an middle ground alternative?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

By itself, a passphrase protected private key requires the passphrase to be entered each time the key is used. This is does not feel like passwordless SSH. However, there are caching mechanisms that allow you to enter the key passphrase once and then use the key over and over without reentering that passphrase. 

OpenSSH comes with an `ssh-agent` daemon and an `ssh-add` utility to cache the unlocked private key. The GNOME desktop also has a [keyring daemon](https://wiki.gnome.org/Projects/GnomeKeyring) that can store passwords and secrets but also implements an SSH agent.

The lifetime of the cached key can be configured with each of the agents or when the key is added. In many cases it defaults to be an unlimited lifetime but the cache is cleared when the user logs out of the system. You will be prompted for the passphrase only once per login session. 

If there is a scheduled application that needs to run outside of a user login session, it may be possible to use a secret or other password manager to automate the unlocking of the key. For example, Ansible Tower stores credentials in a secure database. This includes an SSH private key used to connect to manage nodes and any passphrases necessary for those private keys. Once those credentials are stored, a job can be scheduled to run a playbook on a regular schedule. 


Automating propagation
----------------------
A centralized identity manager such as FreeIPA can assist with propagation of keys. The public key is uploaded to the server as an attribute of a user account and then propagated to the hosts in the domain as needed. FreeIPA can also provide additional host based access control for where a key may be used.

Keys can also be distributed using Ansible modules. The `openssh_keypair` module uses `ssh-keygen` to generate keys and the `authorized_key` module adds and removes SSH authorized keys for particular use accounts. 


Wrapping up
-----------

The SSH key pairs are only one way to automate authenticate without passwords. Using GSSAPI authentication is also very common when trying to reduce the use of passwords on a network with centralized user management. SSH key pairs are easier to manage when single sign on (SSO) is not already available. Many source code repositories grant access using SSH keys. You can upload a public key to an account in the hosting organization such as the Fedora Account System, GitLab, or GitHub sites and use that key pair to authenticate when pulling and pushing content to repositories.



